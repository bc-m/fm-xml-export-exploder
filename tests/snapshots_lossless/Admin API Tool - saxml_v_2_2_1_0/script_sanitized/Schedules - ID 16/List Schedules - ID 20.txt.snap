---
source: src/main.rs
expression: output_content
---
#  PURPOSE: List Schedules
#  HISTORY:
     - Created:   2018-05-09 by Mike Duncan (mduncan@soliantconsulting.com)
     - Modified:  2018-MM-DD by FName LName

AnwenderAbbruchZulassen setzen [ ON ]
Fehleraufzeichnung setzen [ ON ]
Variable setzen [ $error ; 0 ]

# -------------------------------------------------------------
#  SET-UP
# -------------------------------------------------------------
Script ausführen [ Aus Liste ; "Set Config" ]
Variable setzen [ $endpoint ; "/schedules" ]
Variable setzen [ $curloptions ; " --request GET" &
				" --header \"Authorization: Bearer " & $$my.token & "\"" &
				" --header \"Content-Type: application/json\"" &
				" --dump-header $$my.headers" ]

# -------------------------------------------------------------
#  PROCESS
# -------------------------------------------------------------
Aus URL einfügen [ SSL-Zertifikate verifizieren: OFF ; Auswahl: ON ; Mit Dialog: OFF ; Target: $$my.result ; ⚠️ PARAMETER "URL" NOT PARSED ⚠️ ; $curloptions ]
Script ausführen [ Aus Liste ; "Handle response" ]

# save cache of schedules
Wenn [ NICHT IstLeer ( JSONGetElement ( $$my.result ; "response.schedules[0]" ) ) ]
	# save resulting schedules json
	Variable setzen [ $this.sched_cache ; Solange ( 
					   [
					    my.sched = FMS__fmserver::schedules_json;
					    loop = 0;
					    node = Falls ( ZeichenLinks ( JSONFormatElements ( my.sched ) ; 1 ) = "?" ; "" ; JSONGetElement ( $$this.sched ; "[" & loop & "]" ) );
					    $json_output = Falls ( ZeichenLinks ( JSONFormatElements ( my.sched ) ; 1 ) = "?" ; "[]" ; $$this.sched )
					   ];
					  
					   NICHT IstLeer ( node ) ODER loop > 1000 ;
					  
					   [
					    $json_output = JSONSetElement ( my.sched 
					     ; ["[" & loop & "]lastError" ; "" ; JSONString ]
					     ; ["[" & loop & "]lastRun" ; "" ; JSONString ]
					     ; ["[" & loop & "]nextRun" ; "" ; JSONString ]
					     ; ["[" & loop & "]status" ; "" ; JSONString ]
					    ) ;
					    loop = loop + 1;
					    node = JSONGetElement ( my.sched ; "[" & loop & "]" );
					    end = ""
					   ];
					
					 JSONFormatElements ( $json_output )
					
					) ]
	Variable setzen [ $this.sched ; Solange ( 
					   [
					    my.sched = JSONFormatElements ( JSONGetElement ( $$my.result ; "response.schedules" ) );
					    loop = 0;
					    node = Falls ( ZeichenLinks ( JSONFormatElements ( my.sched ) ; 1 ) = "?" ; "" ; JSONGetElement ( $$this.sched ; "[" & loop & "]" ) );
					    $json_output = Falls ( ZeichenLinks ( JSONFormatElements ( my.sched ) ; 1 ) = "?" ; "[]" ; $$this.sched )
					   ];
					  
					   NICHT IstLeer ( node ) ODER loop > 1000 ;
					  
					   [
					    $json_output = JSONSetElement ( my.sched 
					     ; ["[" & loop & "]lastError" ; "" ; JSONString ]
					     ; ["[" & loop & "]lastRun" ; "" ; JSONString ]
					     ; ["[" & loop & "]nextRun" ; "" ; JSONString ]
					     ; ["[" & loop & "]status" ; "" ; JSONString ]
					    ) ;
					    loop = loop + 1;
					    node = JSONGetElement ( my.sched ; "[" & loop & "]" );
					    end = ""
					   ];
					
					 JSONFormatElements ( $json_output )
					
					) ]
	Feldwert setzen [ FMS__fmserver::schedules_json ; $this.sched ]
	Feldwert setzen [ FMS__fmserver::schedules_json_m ; Hole ( SystemZeitstempel ) ]
	Schreibe Änderung Datens./Abfrage [ Mit Dialog: OFF ]
	# compare response with schedule cache to see if there are differences
	Wenn [ HoleContainerAttribute ( $this.sched ; "MD5" ) = HoleContainerAttribute ( $this.sched_cache ; "MD5" ) ]
		# values are the same
	Sonst
		# values are different, save a version of the JSON
		Fenster fixieren
		Variable setzen [ $this.id ; FMS__fmserver::ID ]
		Gehe zu Layout [ Layout: "SCHS__schedules_saved" ; Animation: Ohne ]
		
		Neuer Datensatz/Abfrage
		Feldwert setzen [ SCHS__schedules_saved::ID_Server ; $this.id ]
		Feldwert setzen [ SCHS__schedules_saved::json ; $this.sched ]
		
		Gehe zu Layout [ Layout: <Originallayout> ; Animation: Ohne ]
		Gehe zu Objekt [ "panel_schedules" ]
	Ende (wenn)
	
Ende (wenn)

Variable setzen [ $this.id ; FMS__fmserver::ID ]
Fenster fixieren
Wenn [ IstLeer ( FMS_SCH__schedules::ID ) ]
	Gehe zu Layout [ Layout: "SCH__schedules" ; Animation: Ohne ]
Sonst
	Gehe zu Bezugsdatensatz [ Table: FMS_SCH__schedules ; Layout: "SCH__schedules" ; Show related ]
	Alle Datensätze löschen [ Mit Dialog: OFF ]
Ende (wenn)
Variable setzen [ $this.loop ; 0 ]
Schleife (Anfang) [ Flush: Immer ]
	Wenn [ NICHT IstLeer ( JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "].id" ) ) ]
		Neuer Datensatz/Abfrage
		Feldwert setzen [ SCH__schedules::ID_Server ; $this.id ]
		Feldwert setzen [ SCH__schedules::id_schedule ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "].id" ) ]
		Feldwert setzen [ SCH__schedules::lastError ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "].lastError" ) ]
		Feldwert setzen [ SCH__schedules::name ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "].name" ) ]
		Feldwert setzen [ SCH__schedules::enabled ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "].enabled" ) ]
		Feldwert setzen [ SCH__schedules::status ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "].status" ) ]
		Feldwert setzen [ SCH__schedules::lastRun ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "].lastRun" ) ]
		Feldwert setzen [ SCH__schedules::sendEmail ; Falls ( 
						  ZeichenLinks ( JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "].sendEmail" ) ; 1 ) = "?";
						  "";
						
						  IstLeer ( JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "].sendEmail" ) );
						  "";
						
						  Austauschen ( JSONListValues ( JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "].sendEmail" ) ; "" ) ; "¶" ; "," )
						) ]
		
		# evaluate the type of script
		Wenn [ NICHT IstLeer ( JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]backupType.backupTarget" ) ) ]
			# backupType
			Feldwert setzen [ SCH__schedules::Type ; "Backup" ]
			Feldwert setzen [ SCH__schedules::backupTarget ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]backupType.backupTarget" ) ]
			Feldwert setzen [ SCH__schedules::resourceType ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]backupType.resourceType" ) ]
			Feldwert setzen [ SCH__schedules::resource ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]backupType.resource" ) ]
			Feldwert setzen [ SCH__schedules::clone ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]backupType.clone" ) ]
			Feldwert setzen [ SCH__schedules::cloneOnly ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]backupType.cloneOnly" ) ]
			Feldwert setzen [ SCH__schedules::maxBackups ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]backupType.maxBackups" ) ]
			Feldwert setzen [ SCH__schedules::verify ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]backupType.verify" ) ]
			
		Sonst, wenn [ NICHT IstLeer ( JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]filemakerScriptType.resource" ) ) ]
			# filemakerScriptType
			Feldwert setzen [ SCH__schedules::Type ; "FileMaker Script" ]
			Feldwert setzen [ SCH__schedules::resource ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]filemakerScriptType.resource" ) ]
			Feldwert setzen [ SCH__schedules::fmScriptName ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]filemakerScriptType.fmScriptName" ) ]
			Feldwert setzen [ SCH__schedules::fmScriptParam ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]filemakerScriptType.fmScriptParam" ) ]
			Feldwert setzen [ SCH__schedules::fmScriptAccount ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]filemakerScriptType.fmScriptAccount" ) ]
			Feldwert setzen [ SCH__schedules::fmScriptPassword ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]filemakerScriptType.fmScriptPassword" ) ]
			Feldwert setzen [ SCH__schedules::autoAbort ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]filemakerScriptType.autoAbort" ) ]
			Feldwert setzen [ SCH__schedules::timeout ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]filemakerScriptType.timeout" ) ]
			
		Sonst, wenn [ NICHT IstLeer ( JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]messageType.resourceType" ) ) ]
			# messageType
			Feldwert setzen [ SCH__schedules::Type ; "Message" ]
			Feldwert setzen [ SCH__schedules::resourceType ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]messageType.resourceType" ) ]
			Feldwert setzen [ SCH__schedules::messageText ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]messageType.messageText" ) ]
			Feldwert setzen [ SCH__schedules::resource ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]messageType.resource" ) ]
			
		Sonst, wenn [ NICHT IstLeer ( JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]scriptSequenceType.resource" ) ) ]
			# scriptSequenceType
			Feldwert setzen [ SCH__schedules::Type ; "Script Sequence" ]
			Feldwert setzen [ SCH__schedules::resource ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]scriptSequenceType.resource" ) ]
			Feldwert setzen [ SCH__schedules::fmScriptName ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]scriptSequenceType.fmScriptName" ) ]
			Feldwert setzen [ SCH__schedules::fmScriptParam ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]scriptSequenceType.fmScriptParam" ) ]
			Feldwert setzen [ SCH__schedules::fmScriptAccount ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]scriptSequenceType.fmScriptAccount" ) ]
			Feldwert setzen [ SCH__schedules::fmScriptPassword ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]scriptSequenceType.fmScriptPassword" ) ]
			Feldwert setzen [ SCH__schedules::osScript ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]scriptSequenceType.osScript" ) ]
			Feldwert setzen [ SCH__schedules::osScriptParam ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]scriptSequenceType.osScriptParam" ) ]
			Feldwert setzen [ SCH__schedules::osScript2 ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]scriptSequenceType.osScript2" ) ]
			Feldwert setzen [ SCH__schedules::osScriptParam2 ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]scriptSequenceType.osScriptParam2" ) ]
			Feldwert setzen [ SCH__schedules::osScriptAccount ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]scriptSequenceType.runOSScriptsAsUser.osScriptAccount" ) ]
			Feldwert setzen [ SCH__schedules::osScriptPassword ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]scriptSequenceType.runOSScriptsAsUser.osScriptPassword" ) ]
			Feldwert setzen [ SCH__schedules::autoAbort ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]scriptSequenceType.autoAbort" ) ]
			Feldwert setzen [ SCH__schedules::timeout ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]scriptSequenceType.timeout" ) ]
			
		Sonst, wenn [ NICHT IstLeer ( JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]verifyType.resource" ) ) ]
			# verifyType
			Feldwert setzen [ SCH__schedules::Type ; "Verify" ]
			Feldwert setzen [ SCH__schedules::resource ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]verifyType.resource" ) ]
			Feldwert setzen [ SCH__schedules::resourceType ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]verifyType.resourceType" ) ]
			Feldwert setzen [ SCH__schedules::messageText ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]verifyType.messageText" ) ]
			Feldwert setzen [ SCH__schedules::timeDelay ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]verifyType.timeDelay" ) ]
			
		Sonst, wenn [ NICHT IstLeer ( JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]systemScriptType.osScript" ) ) ]
			# systemScriptType
			Feldwert setzen [ SCH__schedules::Type ; "System Script" ]
			Feldwert setzen [ SCH__schedules::autoAbort ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]systemScriptType.autoAbort" ) ]
			Feldwert setzen [ SCH__schedules::osScript ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]systemScriptType.osScript" ) ]
			Feldwert setzen [ SCH__schedules::osScriptParam ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]systemScriptType.osScriptParam" ) ]
			Feldwert setzen [ SCH__schedules::osScriptAccount ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]systemScriptType.runOSScriptsAsUser.osScriptAccount" ) ]
			Feldwert setzen [ SCH__schedules::osScriptPassword ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]systemScriptType.runOSScriptsAsUser.osScriptPassword" ) ]
			Feldwert setzen [ SCH__schedules::timeout ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]systemScriptType.timeout" ) ]
			
		Ende (wenn)
		
		# evaluate the repeat type
		Wenn [ NICHT IstLeer ( JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]onceType.startTimeStamp" ) ) ]
			# onceType
			Feldwert setzen [ SCH__schedules::startTimeStamp ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]onceType.startTimeStamp" ) ]
			Feldwert setzen [ SCH__schedules::Repeat ; "Once" ]
			
		Sonst, wenn [ NICHT IstLeer ( JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]weeklyType.startTimeStamp" ) ) ]
			# weeklyType
			Feldwert setzen [ SCH__schedules::startTimeStamp ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]weeklyType.startTimeStamp" ) ]
			Feldwert setzen [ SCH__schedules::daysOfTheWeek ; JSONListValues ( JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]weeklyType.daysOfTheWeek" ) ; "" ) ]
			Feldwert setzen [ SCH__schedules::endDate ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]weeklyType.endDate" ) ]
			Feldwert setzen [ SCH__schedules::endDate ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]weeklyType.endDate" ) ]
			Feldwert setzen [ SCH__schedules::repeatInterval ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]weeklyType.repeatTask.repeatInterval" ) ]
			Feldwert setzen [ SCH__schedules::repeatFrequency ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]weeklyType.repeatTask.repeatFrequency" ) ]
			Feldwert setzen [ SCH__schedules::endTime ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]weeklyType.repeatTask.endTime" ) ]
			Feldwert setzen [ SCH__schedules::Repeat ; "Weekly" ]
			
		Sonst, wenn [ NICHT IstLeer ( JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]everyndaysType.startTimeStamp" ) ) ]
			# weeklyType
			Feldwert setzen [ SCH__schedules::startTimeStamp ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]everyndaysType.startTimeStamp" ) ]
			Feldwert setzen [ SCH__schedules::dailyDays ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]everyndaysType.dailyDays" ) ]
			Feldwert setzen [ SCH__schedules::endDate ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]everyndaysType.endDate" ) ]
			Feldwert setzen [ SCH__schedules::repeatInterval ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]everyndaysType.repeatTask.repeatInterval" ) ]
			Feldwert setzen [ SCH__schedules::repeatFrequency ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]everyndaysType.repeatTask.repeatFrequency" ) ]
			Feldwert setzen [ SCH__schedules::endTime ; JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "]everyndaysType.repeatTask.endTime" ) ]
			Feldwert setzen [ SCH__schedules::Repeat ; "Every N Days" ]
			
		Ende (wenn)
		
	Ende (wenn)
	
	Variable setzen [ $this.loop ; $this.loop + 1 ]
	Verlasse Schleife wenn [ IstLeer ( JSONGetElement ( $$my.result ; "response.schedules[" & $this.loop & "].id" ) ) ]
	
Schleife (Ende)

Gehe zu Layout [ Layout: <Originallayout> ; Animation: Ohne ]
Gehe zu Objekt [ "panel_schedules" ]

# clear global for saved schedules
Feldwert setzen [ FMS__fmserver::schedules_saved_select_g ; "" ]
Schreibe Änderung Datens./Abfrage [ Mit Dialog: OFF ]

# -------------------------------------------------------------
#  CLEAN UP
# -------------------------------------------------------------
Wenn [ $error = 0 ]
	#  set to exit true if you do not need to pass an error
	Variable setzen [ $error ; 1 // exit true ]
Ende (wenn)

Aktuelles Script verlassen [ $error ]
