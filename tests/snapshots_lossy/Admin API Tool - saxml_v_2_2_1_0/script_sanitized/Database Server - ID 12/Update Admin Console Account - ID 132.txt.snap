---
source: src/main.rs
expression: output_content
---
#  PURPOSE: Update Admin Console Account
#  HISTORY:
     - Created:   2021-06-28 by Mike Duncan (mduncan@soliantconsulting.com)
     - Modified:  2020-00-00

AnwenderAbbruchZulassen setzen [ ON ]
Fehleraufzeichnung setzen [ ON ]
Variable setzen [ $error ; 0 ]

# -------------------------------------------------------------
#  VALIDATION
# -------------------------------------------------------------
Wenn [ IstLeer ( FMS__fmserver::newUsername ) ODER IstLeer ( FMS__fmserver::newPassword ) ]
	Eigenes Dialogfeld anzeigen [ Title: "Alert" ; Message: "You must provide values for both a new username and password when using this function." ; ⚠️ PARAMETER "Button1" NOT PARSED ⚠️ ; ⚠️ PARAMETER "Button2" NOT PARSED ⚠️ ; ⚠️ PARAMETER "Button3" NOT PARSED ⚠️ ]
	Alle Scripts abbrechen
Ende (wenn)

Eigenes Dialogfeld anzeigen [ Title: "Confirm Action" ; Message: "This will reset the root admin username and password. Are you sure you want to continue?" ; ⚠️ PARAMETER "Button1" NOT PARSED ⚠️ ; ⚠️ PARAMETER "Button2" NOT PARSED ⚠️ ; ⚠️ PARAMETER "Button3" NOT PARSED ⚠️ ]
Wenn [ Hole ( LetzteMeldungswahl ) ≠ 1 ]
	Alle Scripts abbrechen
Ende (wenn)


# -------------------------------------------------------------
#  SET-UP
# -------------------------------------------------------------
Variable setzen [ $$server ; "https://" & FMS__fmserver::server_address & Falls ( FMS__fmserver::usePort = 1 ; ":16000" ) & "/fmi/admin/api/v2" ]
Variable setzen [ $endpoint ; "/server/rootadmin" ]
Variable setzen [ $json ; JSONSetElement ( "" 
				
				 ; [ "newUsername"; FMS__fmserver::newUsername ; JSONString ]
				 ; [ "newPassword"; FMS__fmserver::newPassword ; JSONString ]
				 ; [ "currentUsername"; FMS__fmserver::username ; JSONString ]
				 ; [ "currentPassword"; FMS__fmserver::password ; JSONString ]
				
				) ]

Variable setzen [ $curloptions ; " --request POST" &
				" --header \"Authorization: Basic " & Base64EncodeRFC ( 4648 ; FMS__fmserver::username & ":" & FMS__fmserver::password ) & " \"" &
				" --header \"Content-Type: application/json\"" &
				" --data @$json" &
				
				" --dump-header $$my.headers" ]
# set api update variable
Variable setzen [ $$API.UPDATE ; "1" ]

# -------------------------------------------------------------
#  PROCESS
# -------------------------------------------------------------
Aus URL einfügen [ SSL-Zertifikate verifizieren: OFF ; Auswahl: ON ; Mit Dialog: OFF ; Target: $$my.result ; ⚠️ PARAMETER "URL" NOT PARSED ⚠️ ; $curloptions ]
Script ausführen [ Aus Liste ; "Handle response" ]

Wenn [ Hole ( ScriptErgebnis ) = "1" ]
	Wenn [ JSONGetElement ( $$my.result ; "messages[0].code" ) = "0" ]
		# parse json response
		Feldwert setzen [ FMS__fmserver::username ; JSONGetElement ( $$my.result ; "response.newUsername" ) ]
		Feldwert setzen [ FMS__fmserver::password ; JSONGetElement ( $$my.result ; "response.newPassword" ) ]
		# clear new user and pass fields
		Feldwert setzen [ FMS__fmserver::newUsername ; "" ]
		Feldwert setzen [ FMS__fmserver::newPassword ; "" ]
		# clear token fields
		Feldwert setzen [ FMS__fmserver::token_expires ; "" ]
		Feldwert setzen [ FMS__fmserver::token ; "" ]
		Schreibe Änderung Datens./Abfrage [ Mit Dialog: ON ]
	Sonst
		# invalid result
		Eigenes Dialogfeld anzeigen [ Title: "Login Failure" ; Message: "Login Failed, server responded: " & JSONGetElement ( $$my.result ; "messages[0].code" ) & ": " & JSONGetElement ( $$my.result ; "messages[0].text" ) ; ⚠️ PARAMETER "Button1" NOT PARSED ⚠️ ; ⚠️ PARAMETER "Button2" NOT PARSED ⚠️ ; ⚠️ PARAMETER "Button3" NOT PARSED ⚠️ ]
		
	Ende (wenn)
Sonst
	Eigenes Dialogfeld anzeigen [ Title: "Error" ; Message: "An error occurred. You may need to be logged in with the root admin account, and not an externally authenticated access account." ; ⚠️ PARAMETER "Button1" NOT PARSED ⚠️ ; ⚠️ PARAMETER "Button2" NOT PARSED ⚠️ ; ⚠️ PARAMETER "Button3" NOT PARSED ⚠️ ]
Ende (wenn)
# -------------------------------------------------------------
#  CLEAN UP
# -------------------------------------------------------------
Wenn [ $error = 0 ]
	#  set to exit true if you do not need to pass an error
	Variable setzen [ $error ; 1 // exit true ]
Ende (wenn)

Aktuelles Script verlassen [ $error ]
